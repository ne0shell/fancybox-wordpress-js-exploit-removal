#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, getpass, MySQLdb as mdb

wpTable = 'wp_options'
wpTableKey = 'mfbfw'
wpTableBadValue = '</script>'
verbose = False # Print all wp_options values if option_name is found
clean = True # Prompt to delete rows with bad values

# Databases with custom table prefixes (e.f. foo_options insted of wp_options)
dbExtras = {
	#'wpDbSpecialTplPrefix1': 'foo_',
	#'wpDbSpecialTplPrefix2': 'bar_',
}

def cleanWpDb(wpcon, db, wpTable):
	with wpcon:	
		wpcur = wpcon.cursor(mdb.cursors.DictCursor)

		wpcur.execute("SELECT option_id, option_value FROM " + wpTable + " WHERE option_name='" + wpTableKey + "'")
		data = wpcur.fetchall()
		xp = 0
		for row in data:
			if row['option_value'].find(wpTableBadValue) > 0:
				xp += 1
				print "\n"' ' + str(xp) + ') Database "' + db + '" compromised, '\
						+ 'wp_options row id ' + str(row['option_id']) + ' has value:'\
						+ "\n   " + row['option_value']

				if clean:
					doClean = raw_input("Delete this row? [y/N]: ")
					if doClean.lower() == 'y':
						if not wpcur2:
							wpcur2 = wpcon.cursor()
						qd = "DELETE FROM " + db + "." + wpTable + " WHERE option_id='" + str(row['option_id']) + "'"
						res = wpcur2.execute(qd)
						if res:
							print '  ... deleted successfully'"\n";
			
			elif verbose:
				print "\n"' * Database "' + db + '" table '\
							+ 'wp_options row id ' + str(row['option_id']) + ' has value:'\
							+ "\n   " + row['option_value']
		return xp

mysql_conf = {
	'user': 'root',
	'host': 'localhost',
	'db': 'mysql',
	'passwd': '2bobNbas1'
}
# 	'passwd': getpass.getpass('Enter MySQL root password: ')

con = mdb.connect(**mysql_conf)
with con:
	cur = con.cursor(mdb.cursors.DictCursor)
	cur.execute("""
	SELECT table_schema
	FROM information_schema.tables
	WHERE table_name = %s
	""", wpTable)
	wpdbs = cur.fetchall()
	if not len(wpdbs):
		print 'No WordPress databases found, exiting ...'
		sys.exit(1)

	xp = 0
	wpcur2 = False
	allWpDbs = {}

	for wpdb in wpdbs:
		allWpDbs[wpdb['table_schema']] = 'wp_'

	if len(dbExtras):
		for dbe in dbExtras:
			allWpDbs[dbe] = dbExtras[dbe]

	print "\n" + '* Checking ' + str(len(allWpDbs)) + ' WordPress installations'

	xp = 0
	for wpdb in allWpDbs:
		curr_conf = mysql_conf
		curr_conf['db'] = wpdb
		wpcon = mdb.connect(**curr_conf)
		xp += cleanWpDb(wpcon, wpdb, allWpDbs[wpdb] + 'options')

if not xp:
	print "\n ... No problems found.\n"

sys.exit(0)
